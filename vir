#!/usr/bin/env bash

build_release() {
  if [[ $(uname) != "Linux" ]]; then
    echo "You are running $(uname), not Linux - aborting release"
    exit 1
  fi

  if [[ -z "$MANUAL_VERSION" ]]; then
    while read line
    do
      local prev_build_no=$line
    done < "deployment/build_no"

    if [[ $RERELEASE -eq 0 ]]; then
      echo Updating Release Number
      local build_no=$((prev_build_no + 1))
    else
      local build_no=$prev_build_no
    fi

    while read line
    do
      local major=$line
    done < "deployment/major_ver"

    while read line
    do
      local minor=$line
    done < "deployment/minor_ver"
  else
    IFS="." read major minor build_no <<< "$MANUAL_VERSION"
  fi

  if [[ -z $MANUAL_VERSION_LABEL ]]; then
    local branch_name=$(git rev-parse --abbrev-ref HEAD)
    local release="v$major.$minor.$build_no-$branch_name"
  else
    local release="$MANUAL_VERSION_LABEL"
  fi

  echo "Version $major.$minor.$build_no: $release"

  # Update version on disc even if we're re-releasing
  # because we might have switched branch in which case
  # the full release name will change even though the build
  # number didn't
  if [[ -f "apps/shared/include/version.hrl" ]]; then
    echo "-define(VERSION, \"$release\")." > apps/shared/include/version.hrl
  fi

  if [[ $RERELEASE -eq 0 ]] || [[ -n $MANUAL_VERSION ]] || [[ -n $MANUAL_VERSION_LABEL ]]; then
    echo "$major" > "deployment/major_ver"
    echo "$minor" > "deployment/minor_ver"
    echo "$build_no" > "deployment/build_no"
    echo "$release" > "deployment/label"
  fi

  echo Building Release $release
  if [[ $DIRTYRELEASE -eq 1 ]]; then
    echo "Not cleaning because it's a dirty release"
  else
    rebar3 clean
  fi

  if [[ -z $RELEASE_APP ]]; then
    echo "Releasing all apps"
    for app in $(ls apps/); do
      rebar3 release -n $app
    done
  else
    echo "Releasing $RELEASE_APP"
    rebar3 release $RELEASE_APP
  fi

  if [[ $RERELEASE -eq 0 ]] || [[ -n $MANUAL_VERSION ]] || [[ -n $MANUAL_VERSION_LABEL ]]; then
    # TODO: Deal with native deps if there are any
    echo Making BoM and updating Git with new release tag
    build_bill_of_materials $release "deployment/bill_of_materials"
  fi

  if [[ $RERELEASE -eq 1 ]]; then
    echo "Re-release, not updating version files in git"
  else
    git add deployment/build_no
    git add deployment/bill_of_materials.txt
    git add deployment/bill_of_materials.info

    ls -d apps/*/include | xargs -n 1 git add

    git tag $release
    git commit -m "Automated build number increase: $build_no"
    git push --tags
    git push
    echo Git updated for version $release
  fi

  echo Building tars and publishing
  build_tars $release
}

build_bill_of_materials() {
  local release=$1
  local output=$2
  local logtotxt="$(pwd)/$output.txt"
  local logtoinfo="$(pwd)/$output.info"

  echo "BoM for release $release" > $logtotxt
  echo "Built on: $(hostname) by $(id -un)" >> $logtotxt
  echo "Date: $(date)" >> $logtotxt
  echo >> $logtotxt
  echo >> $logtotxt
  echo "Root project: $(git remote -v)" >> $logtotxt
  git log -n 1 >> $logtotxt
  echo >> $logtotxt
  echo -e "base\t$release\t$(git remote -v | head -1 | awk  '{print $2}')\t$(git rev-parse HEAD)" > $logtoinfo

  local all_deps=$(find deps -mindepth 1 -maxdepth 1 -type d | sort)

  for dep in $all_deps ; do
    pushd $dep > /dev/null
    local this_dep=${dep##*/}
    echo "Git tag for dependency $this_dep" >> $logtotxt
    echo "pulled from $(git remote -v)" >> $logtotxt
    git log -n 1 >> $logtotxt
    echo >> $logtotxt
    echo -e "dep\t$this_dep\t$(git remote -v | head -1 | awk  '{print $2}')\t$(git rev-parse HEAD)" >> $logtoinfo
    popd > /dev/null
  done
}

build_tars() {
  local git_tag=$1
  local releases_folder="$PWD/releases"

  mkdir -p $releases_folder

  if [[ -z $RELEASE_APP ]]; then
    for app in $(ls _build/default/rel)
    do
      local app_dir=_build/default/rel/$app
      build_tar $app_dir $releases_folder $git_tag
    done
  else
    local app_dir=_build/default/rel/$RELEASE_APP
    build_tar $app_dir $releases_folder $git_tag
  fi
}

build_tar() {
  local app_dir=$1
  local releases_folder=$2
  local git_tag=$3

  local app=$(basename $app_dir)
  local working_dir=$(dirname $app_dir)
  local tar_dir="${app}_$git_tag"
  local tar_name="${tar_dir}.tar.gz"
  local autorun_name="$releases_folder/install-${tar_name%.tar.gz}"

  if [[ -f apps/$app/release-files/pre_tar.sh ]]; then
      echo Running pre-tar script for $app
      apps/$app//release-files/pre_tar.sh
  fi

  echo Building $app Archive...
  rm -f $tar_name

  pushd $working_dir > /dev/null
  mv $app $tar_dir
  tar cfz $releases_folder/$tar_name $tar_dir  || { echo "Tar failed"; exit 1; }
  mv $tar_dir $app
  popd > /dev/null

  if [[ -f apps/$app/release-files/post_tar.sh ]]; then
    echo Running post-tar script for $app
    apps/$app/release-files/post_tar.sh $tar_name $git_tag
  else
    cat $SOURCEDIR/autoextract.sh $releases_folder/$tar_name > $autorun_name
    chmod +x $autorun_name
    echo done
  fi
  rm $releases_folder/$tar_name
}

get_latest() {
  pushd $1 > /dev/null
  HeadName=`git rev-parse --abbrev-ref HEAD`
  echo "On branch $HeadName"
  if [ $HeadName == "HEAD" ] ; then
    git checkout master
  fi
  git pull
  popd > /dev/null
}

usage() {
  local cmd=$1
  case $cmd in
    "upgrade")
      echo "vir upgrade"
      echo "---"
      echo "   updates the templates for vir (doesn't update this running script though)"
      echo
      ;;
    "release")
      echo "vir release [-d] [-r] [-a <app_name>] [-v <major>.<minor>.<build>] [-l <build_label>]"
      echo "---"
      echo "   Creates a self extracting tar of each application and updates the versions (if available)"
      echo "   -d is a dirty release (don't build deps, don't clean all)"
      echo "   use with caution"
      echo "   -r is used to re-release whatever the current version number is, so the current version number"
      echo "   is used without being incremented. Use with care."
      echo "   -a app_name just does the release / tar of app_name"
      echo "   -v 1.0.0 uses the provided version number rather than generating a new one. The provided version"
      echo "      version will be written to the deployment/ files as normal"
      echo "   -l v1.0.0-blah uses the specified build label rather than generating one. The provided label"
      echo "      will be written to a shared version.hrl as normal"
      echo
      ;;
    *)
      echo
      echo "Vir is just a release manager on top of rebar3"
      echo "---"
      echo
      usage "upgrade"
      usage "release"
      echo
      ;;
  esac
}

COMMAND=$1
TEMPLATE=empty
APP_NAME=
NODENAME=
TARGET_DIR=$(pwd)
OPTIND=2
SOURCEDIR=$HOME/.vir
TEMPLATEDIR=$SOURCEDIR/templates
RUN_MODE=''
DIRTYRELEASE=0
RERELEASE=0
COOKIE='cookie'
KERNEL='-kernel inet_dist_listen_min 9100 inet_dist_listen_max 9105 +K true +A 10'
MANUAL_VERSION=
MANUAL_VERSION_LABEL=

check_vir_path() {
  if [[ ! -d $SOURCEDIR ]]; then
    echo "Vir installation not found, cloning repo into $SOURCEDIR"
    git clone https://github.com/robashton/vir.git $SOURCEDIR
  fi
}

upgrade_vir() {
  pushd $SOURCEDIR > /dev/null
  git pull
  popd > /dev/null
}

check_vir_path

case "$COMMAND" in
  "upgrade")
    upgrade_vir
    ;;
  "release")
    RELEASE_APP=
    while getopts ":dra:" option; do
      case "$option" in
        d)
          DIRTYRELEASE=1
          ;;
        r)
          RERELEASE=1
          ;;
        a)
          RELEASE_APP=$OPTARG
          ;;
        v)
          MANUAL_VERSION=$OPTARG
          ;;
        l)
          MANUAL_VERSION_LABEL=$OPTARG
          ;;
        ?)
          echo "Error: unknown option -$OPTARG"
          usage
          exit 1
          ;;
      esac
    done
    build_release
    ;;
  *)
    usage
    exit 1
    ;;
esac
